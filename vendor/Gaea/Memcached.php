<?php/** * Memcached客户端封装类* * 注意get取得的值位对象* * @author XingShanghe<xingshanghe@gmail.com>* @date 2015-3-22 下午8:47:43 * @source Memcached.php* @version 2.0.0 * @copyright  Copyright 2015 sobey.com */ namespace Gaea;class Memcached{        private  $_handler;    private $_prefix;        /**     * 构造函数     * @param array $servers     * @param array $options     */    public function __construct( $servers = array(),$options = array())    {        if (isset($options['_prefix'])&&is_string($options['_prefix'])){            $this->_prefix = $options['_prefix'];        }else{            $this->_prefix = Core::config('system','prefix');        }                $this->_handler = new \Memcached();        $_CFG_MEMCACHE = Core::config('memcache');        $options_default = isset($_CFG_MEMCACHE['options'])?$_CFG_MEMCACHE['options']:array();        $options = array_merge($options_default,$options);        if ($options)        {            $this->_handler->setOptions($options);        }                $servers_default = isset($_CFG_MEMCACHE['servers'])?$_CFG_MEMCACHE['servers']:array();        $servers = array_merge($servers_default,$servers);                $this->_handler->addServers($servers);            }        /**     * @access public      * @param string $name  缓存键值     * @return mixed     */    public function get($name)    {        //如果设置了键值前缀，组装键值        if ($this->_prefix){            $name = $this->_prefix.$name;        }        return $this->_handler->get($name);    }        /**     * @access public      * @param string $name      缓存名称     * @param mixed $value      缓存值     * @param integer $expire   有效期     * @return boolean     */    public function set($name,$value,$expire = null)    {        //如果设置了键值前缀，组装键值        if ($this->_prefix){            $name = $this->_prefix.$name;        }        //缓存过期时间设置        if (is_null($expire))        {            $expire = Core::config('system','cache_expire');        }        if ($this->_handler->set($name,$value,time()+$expire))        {            //TODO 队列处理。可参见tp相关类            return true;        }        return false;    }        /**     * 删除某个缓存     * @access public     * @param string $name缓存键值     * @param string $ttl     * @return boolean     */    public function delete($name,$ttl = false)    {        //如果设置了键值前缀，组装键值        if ($this->_prefix){            $name = $this->_prefix.$name;        }                return $ttl === false ?$this->_handler->delete($name):$this->_handler->delete($name,$ttl);    }        /**     * 清除缓存     * @access public     * @return boolean      */    public function clear()    {        return $this->_handler->flush();    }        /**     * 获取memcached对象     * 此方法只做调试用     * @access public      * @return \Memcached;     */    public function get_handler()    {        return $this->_handler;    }        /**     * 获取Memcache服务器的连接状态     * @return boolean     */    public function get_status()    {        return !empty($this->_handler->getStats())?$this->_handler->getStats():false;    }        public function quit()    {        return $this->_handler->quit();    }    }